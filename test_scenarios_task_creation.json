{
  "test_scenarios": [
    {
      "id": "dev_api_rest",
      "title": "Build REST API with Authentication",
      "description": "Create a RESTful API with JWT authentication, rate limiting, and comprehensive error handling. Include endpoints for user management, data CRUD operations, and authentication flows. Implement proper validation, logging, and documentation.",
      "task_type": "Development",
      "priority": "high",
      "complexity": "high",
      "expected_elements": [
        "JWT authentication",
        "rate limiting",
        "REST API",
        "endpoints",
        "error handling",
        "user management",
        "CRUD operations",
        "validation",
        "logging",
        "documentation"
      ],
      "quality_indicators": [
        "authentication",
        "API",
        "endpoints",
        "security",
        "database",
        "middleware",
        "routes"
      ],
      "success_criteria": {
        "technical_specificity": 80,
        "implementation_quality": 85,
        "structure_quality": 75,
        "scenario_relevance": 90
      }
    },
    {
      "id": "ui_dashboard_realtime",
      "title": "Create Real-time Analytics Dashboard",
      "description": "Develop a responsive dashboard with real-time charts, data visualization, and interactive filters. Use modern UI frameworks like React or Vue.js, implement WebSocket connections, and ensure mobile compatibility with proper state management.",
      "task_type": "Development",
      "priority": "medium",
      "complexity": "medium",
      "expected_elements": [
        "dashboard",
        "real-time",
        "charts",
        "visualization",
        "responsive",
        "filters",
        "mobile compatibility",
        "UI framework",
        "WebSocket",
        "state management"
      ],
      "quality_indicators": [
        "dashboard",
        "charts",
        "responsive",
        "real-time",
        "visualization",
        "React",
        "Vue",
        "WebSocket"
      ],
      "success_criteria": {
        "technical_specificity": 75,
        "implementation_quality": 80,
        "structure_quality": 85,
        "scenario_relevance": 85
      }
    },
    {
      "id": "bug_memory_leak_fix",
      "title": "Fix Memory Leak in Data Processing Pipeline",
      "description": "Investigate and fix a memory leak occurring in the data processing pipeline during large dataset operations. Profile memory usage, identify leak sources, implement proper cleanup, and add monitoring to prevent future issues.",
      "task_type": "Bug Fix",
      "priority": "critical",
      "complexity": "high",
      "expected_elements": [
        "memory leak",
        "data processing",
        "profiling",
        "cleanup",
        "investigation",
        "large dataset",
        "pipeline",
        "monitoring",
        "debugging"
      ],
      "quality_indicators": [
        "memory",
        "profiling",
        "investigation",
        "cleanup",
        "optimization",
        "debugging",
        "monitoring"
      ],
      "success_criteria": {
        "technical_specificity": 85,
        "implementation_quality": 90,
        "structure_quality": 80,
        "scenario_relevance": 95
      }
    },
    {
      "id": "integration_payment_stripe",
      "title": "Integrate Stripe Payment Gateway",
      "description": "Integrate Stripe payment gateway with existing checkout system. Handle payment processing, webhooks for event handling, implement proper error scenarios with retry logic, and ensure PCI compliance with secure token handling.",
      "task_type": "Integration",
      "priority": "high",
      "complexity": "medium",
      "expected_elements": [
        "Stripe",
        "payment gateway",
        "checkout",
        "webhooks",
        "payment processing",
        "security",
        "error scenarios",
        "PCI compliance",
        "token handling"
      ],
      "quality_indicators": [
        "payment",
        "integration",
        "security",
        "webhooks",
        "processing",
        "Stripe",
        "compliance"
      ],
      "success_criteria": {
        "technical_specificity": 80,
        "implementation_quality": 85,
        "structure_quality": 75,
        "scenario_relevance": 90
      }
    },
    {
      "id": "docs_api_comprehensive",
      "title": "Create Comprehensive API Documentation",
      "description": "Generate comprehensive API documentation with interactive examples, authentication guides, rate limiting information, and testing capabilities. Include OpenAPI specification, code samples in multiple languages, and integration guides.",
      "task_type": "Documentation",
      "priority": "medium",
      "complexity": "low",
      "expected_elements": [
        "API documentation",
        "examples",
        "authentication guides",
        "interactive testing",
        "OpenAPI",
        "code samples",
        "rate limiting",
        "integration guides"
      ],
      "quality_indicators": [
        "documentation",
        "examples",
        "guides",
        "OpenAPI",
        "samples",
        "interactive",
        "specification"
      ],
      "success_criteria": {
        "technical_specificity": 70,
        "implementation_quality": 75,
        "structure_quality": 90,
        "scenario_relevance": 85
      }
    },
    {
      "id": "performance_db_optimization",
      "title": "Optimize Database Query Performance",
      "description": "Analyze and optimize slow database queries in the analytics system. Implement proper indexing strategies, query optimization techniques, connection pooling, and caching mechanisms. Include performance monitoring and alerting.",
      "task_type": "Performance",
      "priority": "high",
      "complexity": "high",
      "expected_elements": [
        "database optimization",
        "query performance",
        "indexing",
        "connection pooling",
        "caching",
        "monitoring",
        "analytics",
        "slow queries"
      ],
      "quality_indicators": [
        "performance",
        "optimization",
        "database",
        "indexing",
        "caching",
        "monitoring",
        "queries"
      ],
      "success_criteria": {
        "technical_specificity": 85,
        "implementation_quality": 90,
        "structure_quality": 80,
        "scenario_relevance": 90
      }
    },
    {
      "id": "security_auth_system",
      "title": "Implement Multi-Factor Authentication",
      "description": "Implement a comprehensive multi-factor authentication system with TOTP, SMS, and email verification options. Include backup codes, device registration, session management, and security audit logging.",
      "task_type": "Security",
      "priority": "critical",
      "complexity": "high",
      "expected_elements": [
        "multi-factor authentication",
        "TOTP",
        "SMS verification",
        "email verification",
        "backup codes",
        "device registration",
        "session management",
        "security audit",
        "logging"
      ],
      "quality_indicators": [
        "authentication",
        "security",
        "TOTP",
        "verification",
        "audit",
        "session",
        "MFA"
      ],
      "success_criteria": {
        "technical_specificity": 90,
        "implementation_quality": 95,
        "structure_quality": 85,
        "scenario_relevance": 95
      }
    },
    {
      "id": "migration_microservices",
      "title": "Migrate Monolith to Microservices",
      "description": "Plan and execute migration of monolithic application to microservices architecture. Design service boundaries, implement API gateways, set up service discovery, and establish inter-service communication patterns.",
      "task_type": "Architecture",
      "priority": "medium",
      "complexity": "high",
      "expected_elements": [
        "microservices",
        "monolith migration",
        "service boundaries",
        "API gateway",
        "service discovery",
        "inter-service communication",
        "architecture design",
        "migration strategy"
      ],
      "quality_indicators": [
        "microservices",
        "architecture",
        "migration",
        "services",
        "API",
        "communication",
        "design"
      ],
      "success_criteria": {
        "technical_specificity": 85,
        "implementation_quality": 85,
        "structure_quality": 90,
        "scenario_relevance": 90
      }
    },
    {
      "id": "testing_e2e_automation",
      "title": "Implement End-to-End Test Automation",
      "description": "Set up comprehensive end-to-end test automation using modern testing frameworks. Include user journey testing, API testing, visual regression testing, and CI/CD integration with detailed reporting.",
      "task_type": "Testing",
      "priority": "medium",
      "complexity": "medium",
      "expected_elements": [
        "end-to-end testing",
        "test automation",
        "user journey testing",
        "API testing",
        "visual regression",
        "CI/CD integration",
        "testing frameworks",
        "reporting"
      ],
      "quality_indicators": [
        "testing",
        "automation",
        "end-to-end",
        "framework",
        "CI/CD",
        "regression",
        "reporting"
      ],
      "success_criteria": {
        "technical_specificity": 80,
        "implementation_quality": 85,
        "structure_quality": 85,
        "scenario_relevance": 85
      }
    },
    {
      "id": "devops_ci_cd_pipeline",
      "title": "Setup CI/CD Pipeline with Docker",
      "description": "Design and implement a complete CI/CD pipeline using Docker containers, automated testing, security scanning, and multi-environment deployment. Include monitoring, rollback capabilities, and infrastructure as code.",
      "task_type": "DevOps",
      "priority": "high",
      "complexity": "high",
      "expected_elements": [
        "CI/CD pipeline",
        "Docker",
        "automated testing",
        "security scanning",
        "deployment",
        "monitoring",
        "rollback",
        "infrastructure as code",
        "containers"
      ],
      "quality_indicators": [
        "CI/CD",
        "Docker",
        "pipeline",
        "deployment",
        "automation",
        "monitoring",
        "infrastructure"
      ],
      "success_criteria": {
        "technical_specificity": 85,
        "implementation_quality": 90,
        "structure_quality": 85,
        "scenario_relevance": 90
      }
    }
  ],
  "quality_thresholds": {
    "excellent": {
      "overall_score": 85,
      "technical_specificity": 80,
      "implementation_quality": 85,
      "structure_quality": 80,
      "scenario_relevance": 85
    },
    "good": {
      "overall_score": 75,
      "technical_specificity": 70,
      "implementation_quality": 75,
      "structure_quality": 70,
      "scenario_relevance": 75
    },
    "acceptable": {
      "overall_score": 65,
      "technical_specificity": 60,
      "implementation_quality": 65,
      "structure_quality": 60,
      "scenario_relevance": 65
    }
  },
  "provider_expectations": {
    "anthropic": {
      "strengths": ["detailed analysis", "structured responses", "technical accuracy"],
      "expected_quality": 85,
      "best_task_types": ["Development", "Security", "Architecture"]
    },
    "openai": {
      "strengths": ["comprehensive coverage", "code examples", "practical implementation"],
      "expected_quality": 80,
      "best_task_types": ["Development", "Documentation", "Testing"]
    },
    "groq": {
      "strengths": ["fast generation", "concise responses", "technical focus"],
      "expected_quality": 75,
      "best_task_types": ["Bug Fix", "Performance", "DevOps"]
    },
    "ollama": {
      "strengths": ["local processing", "consistent availability", "cost effective"],
      "expected_quality": 70,
      "best_task_types": ["Documentation", "Testing", "Integration"]
    }
  },
  "test_configuration": {
    "timeout_seconds": 30,
    "retry_attempts": 2,
    "delay_between_tests": 0.5,
    "output_directory": "theherotasks/testing",
    "generate_provider_specific_files": true,
    "include_quality_analysis": true,
    "generate_comparison_report": true
  }
} 